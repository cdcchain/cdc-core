// This file is generated by ubcore_json_to_cpp from ${json_file_name}
#ifndef CDC_TEST_NETWORK
#include <consensus/genesis/GenesisJson.hpp>
#include <consensus/genesis/GenesisState.hpp>

#include <string>
#include <fc/crypto/sha256.hpp>
#include <fc/io/raw.hpp>

namespace cdcchain { namespace consensus {
static const unsigned char raw_genesis_config0[] =
{
  0xf0, 0x8a, 0x61, 0x5a, 0x00, 0x0a, 0x07, 0x75, 0x62, 0x69, 0x6e, 0x69, 0x74, 
  0x30, 0x02, 0x5f, 0x04, 0x43, 0x4b, 0x9e, 0xcc, 0xa9, 0x48, 0xf7, 0x94, 0xe8, 
  0x35, 0xfd, 0x86, 0xc3, 0xe7, 0x52, 0x64, 0x11, 0xda, 0xe4, 0xdc, 0xed, 0xf9, 
  0x79, 0x98, 0x4d, 0x62, 0xc8, 0x35, 0xcb, 0xa9, 0x07, 0x75, 0x62, 0x69, 0x6e, 
  0x69, 0x74, 0x31, 0x02, 0xde, 0x00, 0x7b, 0x48, 0xd4, 0x21, 0xc2, 0x15, 0x7e, 
  0x6c, 0x33, 0xba, 0xff, 0x2b, 0x17, 0x63, 0xc4, 0x32, 0x95, 0x2e, 0x3a, 0x4f, 
  0x84, 0x4b, 0x7b, 0x70, 0x30, 0x85, 0x98, 0xba, 0x00, 0x19, 0x07, 0x75, 0x62, 
  0x69, 0x6e, 0x69, 0x74, 0x32, 0x02, 0xaf, 0x5d, 0x9d, 0x58, 0x93, 0x01, 0x21, 
  0xa9, 0x7a, 0x50, 0xc2, 0x5a, 0x11, 0xcf, 0x5f, 0xbc, 0x25, 0x53, 0xcb, 0x29, 
  0xaf, 0x7e, 0x8b, 0x98, 0x97, 0x24, 0x51, 0xcd, 0x4f, 0x72, 0x87, 0xa7, 0x07, 
  0x75, 0x62, 0x69, 0x6e, 0x69, 0x74, 0x33, 0x02, 0xbe, 0xa9, 0x3a, 0x99, 0x25, 
  0xed, 0xcf, 0xbb, 0x0a, 0xcb, 0x00, 0x1b, 0x34, 0xf2, 0xd4, 0x11, 0x6a, 0x9a, 
  0x0c, 0x0b, 0x66, 0x3f, 0x47, 0xd0, 0x42, 0xc9, 0x4e, 0x0c, 0xda, 0x57, 0xea, 
  0x0e, 0x07, 0x75, 0x62, 0x69, 0x6e, 0x69, 0x74, 0x34, 0x03, 0x66, 0xf0, 0x8b, 
  0xe6, 0x17, 0x56, 0x07, 0x95, 0xe0, 0x61, 0xc4, 0xbf, 0x07, 0xdd, 0x45, 0x07, 
  0xad, 0xa0, 0xd2, 0xcf, 0xc2, 0xdd, 0x6b, 0x2b, 0xff, 0xab, 0x00, 0x9e, 0xd6, 
  0x8c, 0xce, 0xf0, 0x07, 0x75, 0x62, 0x69, 0x6e, 0x69, 0x74, 0x35, 0x03, 0xc9, 
  0x38, 0x81, 0x72, 0xa7, 0xaa, 0x83, 0xf3, 0x0e, 0x7d, 0xc9, 0xe2, 0x85, 0x50, 
  0x4a, 0x00, 0xac, 0x16, 0xe7, 0xf0, 0x72, 0xa1, 0x73, 0x18, 0xc4, 0xc6, 0x4e, 
  0xf5, 0x7e, 0xe0, 0xc4, 0x6e, 0x07, 0x75, 0x62, 0x69, 0x6e, 0x69, 0x74, 0x36, 
  0x02, 0xc7, 0xcd, 0x09, 0x71, 0x85, 0x41, 0xfc, 0x3b, 0x4d, 0x11, 0x8c, 0x25, 
  0xb7, 0xe0, 0x78, 0xa0, 0xcd, 0x6c, 0xeb, 0x2f, 0xad, 0xdc, 0x9b, 0x72, 0xb1, 
  0xd0, 0xa8, 0xd7, 0xeb, 0xc4, 0xc7, 0x17, 0x07, 0x75, 0x62, 0x69, 0x6e, 0x69, 
  0x74, 0x37, 0x03, 0xa6, 0xd1, 0xcc, 0x45, 0x3d, 0x65, 0xe3, 0x9e, 0x75, 0xbc, 
  0x44, 0xca, 0x2c, 0x3b, 0xe4, 0x26, 0xce, 0x77, 0x74, 0xf9, 0x7a, 0xfd, 0xa6, 
  0x28, 0xe1, 0x2e, 0x82, 0x46, 0x34, 0x7d, 0x53, 0xec, 0x07, 0x75, 0x62, 0x69, 
  0x6e, 0x69, 0x74, 0x38, 0x03, 0x0f, 0xb4, 0xcd, 0x54, 0x49, 0x2f, 0x1b, 0xac, 
  0x2e, 0x6c, 0xe0, 0x07, 0xf9, 0xbd, 0x53, 0x5e, 0x7f, 0xf7, 0xf7, 0xb9, 0xf5, 
  0x30, 0x86, 0x6d, 0x81, 0xde, 0xe4, 0x5c, 0x59, 0xfc, 0x76, 0xcc, 0x13, 0x6d, 
  0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2d, 0x61, 0x63, 
  0x63, 0x6f, 0x75, 0x6e, 0x74, 0x02, 0x1e, 0x6f, 0xa5, 0xe3, 0x36, 0x5e, 0x56, 
  0x83, 0x3d, 0xde, 0x31, 0x08, 0x26, 0xa9, 0x8c, 0x36, 0xbb, 0x00, 0xb7, 0xcd, 
  0x63, 0xc2, 0x97, 0x3d, 0x74, 0x3a, 0xf1, 0x18, 0xa1, 0x78, 0xbf, 0xb2, 0x01, 
  0x22, 0x55, 0x64, 0x75, 0x79, 0x36, 0x50, 0x33, 0x73, 0x54, 0x4b, 0x4d, 0x4d, 
  0x33, 0x47, 0x61, 0x56, 0x4e, 0x53, 0x74, 0x44, 0x6a, 0x43, 0x57, 0x59, 0x63, 
  0x78, 0x48, 0x38, 0x56, 0x59, 0x79, 0x53, 0x42, 0x34, 0x00, 0x40, 0x07, 0x5a, 
  0xf0, 0x75, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

GenesisState get_builtin_genesis_block_config()
{
  unsigned total_size = sizeof(raw_genesis_config0);
  std::unique_ptr<char[]> buffer(new char[total_size]);
  char *ptr = buffer.get();
  memcpy(ptr, (const char*)raw_genesis_config0, sizeof(raw_genesis_config0));
  ptr += sizeof(raw_genesis_config0);
  return fc::raw::unpack<GenesisState>(buffer.get(), total_size);
}

fc::sha256 get_builtin_genesis_block_state_hash()
{
  fc::sha256::encoder encoder;
  encoder.write((const char*)raw_genesis_config0, sizeof(raw_genesis_config0));
  return encoder.result();
}

} } // end namespace cdcchain::consensus
#endif